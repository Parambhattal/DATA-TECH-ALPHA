import React, { useState, useEffect } from 'react';
import { Clock, CheckCircle, XCircle, Flag, Sun, Moon, ChevronDown } from 'lucide-react';
import { CourseTest, getTestByTestId } from '../../pages/Testdata';
import { useAuth } from '../../contexts/AuthContext';

// Translation dictionary
const translations = {
  english: {
    practiceTests: "Practice Tests",
    startTest: "Start Test",
    testInstructions: "Test Instructions",
    question: "Question",
    of: "of",
    mark: "Mark",
    marked: "Marked",
    previous: "Previous",
    next: "Next",
    nextSection: "Next Section",
    submitEnd: "SUBMIT/END",
    submitTest: "Submit Test",
    endTest: "End Test",
    testPassed: "Test Passed!",
    testCompleted: "Test Completed",
    answered: "Answered",
    retakeTest: "Retake Test",
    endTestConfirmation: "End Test Confirmation",
    endTestMessage: "Are you sure you want to end the test? The test will be submitted with your current answers.",
    confirmEnd: "Type \"END\" in capital letters to confirm:",
    cancel: "Cancel",
    confirmEndTest: "Confirm End Test",
    completeAllQuestions: "Complete All Questions",
    continueTest: "Continue Test",
    goToMarked: "Go to Marked",
    tabSwitchWarning: "Warning: Tab Switch Detected",
    tabSwitchMessage: "You have switched tabs {count} time(s). You have {remaining} remaining switch(es) before the test is automatically submitted.",
    tabSwitchWarningDetail: "Please remain on this tab during the test to avoid automatic submission.",
    understand: "I Understand",
    questions: "Questions",
    marksObtained: "Marks Obtained",
    markingScheme: "Marking Scheme",
    markingSchemeDetail: "Marking Scheme: +2 for correct, -0.5 for wrong",
    passingScore: "Passing Score",
    loadingQuestions: "Loading test questions..."
  }
};

interface TestConductorNewProps {
  testId?: string;
}

const TestConductorNew: React.FC<TestConductorNewProps> = ({ testId }) => {
  const { user } = useAuth();
  const [localTheme, setLocalTheme] = useState<'dark' | 'light'>('dark');
  const [language, setLanguage] = useState<'english' | 'hindi'>('english');
  
  // Test state
  const [selectedTest, setSelectedTest] = useState<CourseTest | null>(null);
  const [testStarted, setTestStarted] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  
  // Question state
  const [currentIndex, setCurrentIndex] = useState(0);
  const [currentSectionIndex, setCurrentSectionIndex] = useState(0);
  const [answers, setAnswers] = useState<{ [key: number]: number }>({});
  const [markedQuestions, setMarkedQuestions] = useState<{ sectionIndex: number, questionId: number }[]>([]);
  
  // Timer and scoring
  const [timeLeft, setTimeLeft] = useState(0);
  const [score, setScore] = useState(0);
  const [totalMarks, setTotalMarks] = useState(0);
  const [maxPossibleMarks, setMaxPossibleMarks] = useState(0);
  
  // Modals
  const [showEndTestModal, setShowEndTestModal] = useState(false);
  const [confirmationText, setConfirmationText] = useState('');
  const [showMarkedWarningModal, setShowMarkedWarningModal] = useState(false);
  const [markedWarningMessage, setMarkedWarningMessage] = useState('');
  const [showSubmitOptions, setShowSubmitOptions] = useState(false);
  
  // Tab switching control
  const [tabSwitchCount, setTabSwitchCount] = useState(0);
  const [showTabSwitchWarning, setShowTabSwitchWarning] = useState(false);
  const MAX_TAB_SWITCHES = 3;

  // Get current questions
  const currentQuestions = selectedTest?.sections
    ? selectedTest.sections[currentSectionIndex]?.questions || []
    : selectedTest?.questions || [];
  const currentQuestion = currentQuestions[currentIndex];

  // Fetch and start test by testId if provided
  useEffect(() => {
    if (testId) {
      const test = getTestByTestId(testId);
      if (test) {
        setSelectedTest(test);
        setTimeLeft(test.duration);
        setTestStarted(true);
      }
    }
  }, [testId]);

  // Timer effect
  useEffect(() => {
    if (!testStarted || isSubmitted) return;

    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          calculateScoreAndSubmit();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [testStarted, isSubmitted]);

  // Format time as MM:SS
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
  };

  // Start test
  const startTest = () => {
    if (selectedTest) {
      setTestStarted(true);
      setTimeLeft(selectedTest.duration);
      setCurrentIndex(0);
      setCurrentSectionIndex(0);
      setAnswers({});
      setMarkedQuestions([]);
      setScore(0);
      setTotalMarks(0);
      setMaxPossibleMarks(0);
      setTabSwitchCount(0);
      window.scrollTo(0, 0);
    }
  };

  // Show loading state while test is being loaded
  if (!selectedTest) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p>{t('loadingQuestions')}</p>
        </div>
      </div>
    );
  }

  // Test in progress screen
  return (
    <div className="fixed inset-0 bg-white dark:bg-gray-900 p-4 overflow-auto">
      <div className="max-w-5xl mx-auto">
        <div className="flex justify-between items-center mb-6">
          <div>
            <h2 className="text-2xl font-bold">{selectedTest.title}</h2>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              {t('question')} {currentIndex + 1} {t('of')} {currentQuestions.length}
              {selectedTest.sections && ` (${selectedTest.sections[currentSectionIndex]?.name || ''})`}
            </p>
          </div>
          
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <Clock className="h-5 w-5" />
              <span className="font-medium">{formatTime(timeLeft)}</span>
            </div>
            
            <button
              onClick={() => setShowSubmitOptions(!showSubmitOptions)}
              className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
            >
              {t('submitEnd')}
            </button>
          </div>
        </div>

        {/* Question content will go here */}
        
      </div>
    </div>
  );

  // Helper function to translate strings with placeholders
  function t(key: keyof typeof translations.english, params: Record<string, string | number> = {}) {
    let translation = translations[language][key];
    Object.entries(params).forEach(([param, value]) => {
      translation = translation.replace(`{${param}}`, value.toString());
    });
    return translation;
  }

  // Calculate and submit score
  async function calculateScoreAndSubmit() {
    if (!selectedTest) return;

    let marks = 0;
    let maxMarks = 0;

    const calculateSection = (questions: any[]) => {
      questions.forEach(q => {
        maxMarks += 2;
        if (answers[q.id] !== undefined) {
          if (answers[q.id] === q.correctAnswer) {
            marks += 2;
          } else if (selectedTest.negativeMarking) {
            marks -= selectedTest.negativeMarking;
          }
        }
      });
    };

    if (selectedTest.sections) {
      selectedTest.sections.forEach(section => calculateSection(section.questions));
    } else if (selectedTest.questions) {
      calculateSection(selectedTest.questions);
    }

    setTotalMarks(marks);
    setMaxPossibleMarks(maxMarks);
    setIsSubmitted(true);
  }
};

export default TestConductorNew;
