import { useState, useEffect } from 'react';
import { Search, Trash2, Mail, Loader2, AlertCircle, PlusCircle } from 'lucide-react';
import { databases } from '../../Services/appwrite';
import { Query, Models } from 'appwrite';
import AssignCourseModal from '../../components/admin/AssignCourseModal';
import { getTeacherIDByUser } from '../../Services/teacherService';

// Constants for database
const DATABASE_ID = '68261b6a002ba6c3b584';
const PROFILE_COLLECTION_ID = '68261bb5000a54d8652b';
const COURSES_COLLECTION_ID = '682644ed002b437582d3';

// Types
interface Course {
  $id: string;
  title: string;
  description?: string;
}

interface Teacher extends Models.Document {
  name: string;
  email: string;
  teacherId?: string;
  courses?: Course[];
  students?: number;
  is_active?: boolean;
  role?: string;
  status?: 'active' | 'inactive';
  $createdAt: string;
}

const TeachersPage = () => {
  // State
  const [teachers, setTeachers] = useState<Teacher[]>([]);
  const [filteredTeachers, setFilteredTeachers] = useState<Teacher[]>([]);
  const [allCourses, setAllCourses] = useState<Course[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isAssignModalOpen, setIsAssignModalOpen] = useState(false);
  const [selectedTeacher, setSelectedTeacher] = useState<{ id: string; name: string } | null>(null);
  const [searchQuery, setSearchQuery] = useState('');

  // Fetch all teachers
  const fetchTeachers = async () => {
    try {
      setIsLoading(true);
      const response = await databases.listDocuments<Teacher>(
        DATABASE_ID,
        PROFILE_COLLECTION_ID,
        [Query.equal('role', 'teacher'), Query.limit(100)]
      );

      const teachersData = await Promise.all(
        response.documents.map(async (teacher) => {
          let teacherId = teacher.teacherId;
          if (!teacherId) {
            try {
              const id = await getTeacherIDByUser(teacher.$id);
              teacherId = id || 'N/A';
            } catch (err) {
              console.error(`Error fetching teacher ID for ${teacher.$id}:`, err);
              teacherId = 'Error';
            }
          }
          
          return {
            ...teacher,
            name: teacher.name || 'No Name',
            email: teacher.email || 'No Email',
            teacherId,
            courses: teacher.courses || [],
            status: teacher.is_active ? 'active' : 'inactive',
            students: teacher.students || 0,
          };
        })
      );

      setTeachers(teachersData);
      setFilteredTeachers(teachersData);
      setError(null);
    } catch (err) {
      console.error('Error fetching teachers:', err);
      setError('Failed to load teachers. Please try again later.');
    } finally {
      setIsLoading(false);
    }
  };

  // Fetch all courses
  const fetchCourses = async () => {
    try {
      const response = await databases.listDocuments<Course>(
        DATABASE_ID,
        COURSES_COLLECTION_ID,
        [Query.limit(100)]
      );
      setAllCourses(response.documents);
    } catch (err) {
      console.error('Error fetching courses:', err);
      setError('Failed to load courses. Please try again.');
    }
  };

  // Fetch data on component mount
  useEffect(() => {
    fetchTeachers();
    fetchCourses();
  }, []);

  // Filter teachers based on search query
  useEffect(() => {
    if (searchQuery.trim() === '') {
      setFilteredTeachers(teachers);
    } else {
      const query = searchQuery.toLowerCase();
      const filtered = teachers.filter(
        (teacher) =>
          teacher.name?.toLowerCase().includes(query) ||
          teacher.email?.toLowerCase().includes(query) ||
          teacher.teacherId?.toLowerCase().includes(query)
      );
      setFilteredTeachers(filtered);
    }
  }, [searchQuery, teachers]);

  // Handle course assignment
  const handleAssignCourse = async (courseId: string) => {
    if (!selectedTeacher) return;

    try {
      const teacher = await databases.getDocument(
        DATABASE_ID,
        PROFILE_COLLECTION_ID,
        selectedTeacher.id
      );

      const currentCourses = teacher.courses || [];
      const course = allCourses.find((c) => c.$id === courseId);

      if (!course) return;

      const isAssigned = currentCourses.some((c: any) => c.$id === courseId);
      let updatedCourses;

      if (isAssigned) {
        updatedCourses = currentCourses.filter((c: any) => c.$id !== courseId);
      } else {
        updatedCourses = [
          ...currentCourses,
          { $id: course.$id, title: course.title, description: course.description || '' },
        ];
      }

      // Update in database
      await databases.updateDocument(
        DATABASE_ID,
        PROFILE_COLLECTION_ID,
        selectedTeacher.id,
        { courses: updatedCourses }
      );

      // Update local state
      setTeachers((prev) =>
        prev.map((t) =>
          t.$id === selectedTeacher.id ? { ...t, courses: updatedCourses } : t
        )
      );

      // Show success message
      alert(
        `Course ${isAssigned ? 'unassigned from' : 'assigned to'} ${
          selectedTeacher.name
        } successfully`
      );
    } catch (error) {
      console.error('Error assigning course:', error);
      alert('Failed to update course assignment. Please try again.');
    }
  };

  // Toggle teacher status
  const toggleTeacherStatus = async (teacherId: string, currentStatus: boolean) => {
    try {
      await databases.updateDocument(
        DATABASE_ID,
        PROFILE_COLLECTION_ID,
        teacherId,
        { is_active: !currentStatus }
      );

      setTeachers((prev) =>
        prev.map((t) =>
          t.$id === teacherId ? { ...t, is_active: !currentStatus } : t
        )
      );
    } catch (error) {
      console.error('Error toggling teacher status:', error);
      alert('Failed to update teacher status. Please try again.');
    }
  };

  // Open assign course modal
  const openAssignModal = (teacher: Teacher) => {
    setSelectedTeacher({ id: teacher.$id, name: teacher.name });
    setIsAssignModalOpen(true);
  };

  // Render loading state
  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <Loader2 className="w-8 h-8 animate-spin text-indigo-600" />
      </div>
    );
  }

  // Render error state
  if (error) {
    return (
      <div className="p-4 text-red-600 bg-red-100 rounded-md">
        <div className="flex items-center">
          <AlertCircle className="w-5 h-5 mr-2" />
          <span>{error}</span>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-4 sm:space-y-0">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Teachers</h1>
          <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
            Manage all teachers and their permissions
          </p>
        </div>
        
        {/* Search Bar */}
        <div className="relative w-full sm:w-64">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <Search className="h-4 w-4 text-gray-400" />
          </div>
          <input
            type="text"
            className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white dark:bg-dark-800 text-gray-900 dark:text-white placeholder-gray-500 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            placeholder="Search teachers..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
      </div>

      {/* Teachers Table */}
      <div className="bg-white dark:bg-dark-800 shadow overflow-hidden sm:rounded-lg">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200 dark:divide-dark-700">
            <thead className="bg-gray-50 dark:bg-dark-700">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Name
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Email
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Teacher ID
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Courses
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Status
                </th>
                <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white dark:bg-dark-800 divide-y divide-gray-200 dark:divide-dark-700">
              {filteredTeachers.map((teacher) => (
                <tr key={teacher.$id} className="hover:bg-gray-50 dark:hover:bg-dark-700">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="h-10 w-10 flex-shrink-0">
                        <div className="h-10 w-10 rounded-full bg-indigo-100 dark:bg-indigo-900 flex items-center justify-center">
                          <span className="text-indigo-600 dark:text-indigo-300 font-medium">
                            {teacher.name.split(' ').map(n => n[0]).join('').toUpperCase()}
                          </span>
                        </div>
                      </div>
                      <div className="ml-4">
                        <div className="text-sm font-medium text-gray-900 dark:text-white">
                          {teacher.name}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900 dark:text-white">{teacher.email}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900 dark:text-white">{teacher.teacherId}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900 dark:text-white">
                      {teacher.courses?.length || 0} courses
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                      teacher.status === 'active' 
                        ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' 
                        : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                    }`}>
                      {teacher.status}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div className="flex justify-end space-x-2">
                      <button
                        onClick={() => openAssignModal(teacher)}
                        className="text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-300"
                        title="Assign Course"
                      >
                        <PlusCircle className="h-5 w-5" />
                      </button>
                      <button
                        onClick={() => window.location.href = `mailto:${teacher.email}`}
                        className="text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-300"
                        title="Send Email"
                      >
                        <Mail className="h-5 w-5" />
                      </button>
                      <button
                        onClick={() => toggleTeacherStatus(teacher.$id, !!teacher.is_active)}
                        className={`${
                          teacher.status === 'active'
                            ? 'text-yellow-600 hover:text-yellow-900 dark:text-yellow-400 dark:hover:text-yellow-300'
                            : 'text-green-600 hover:text-green-900 dark:text-green-400 dark:hover:text-green-300'
                        }`}
                        title={teacher.status === 'active' ? 'Deactivate' : 'Activate'}
                      >
                        {teacher.status === 'active' ? 'Deactivate' : 'Activate'}
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Assign Course Modal */}
      {selectedTeacher && (
        <AssignCourseModal
          isOpen={isAssignModalOpen}
          onClose={() => {
            setIsAssignModalOpen(false);
            setSelectedTeacher(null);
          }}
          teacherId={selectedTeacher.id}
          teacherName={selectedTeacher.name}
          onAssign={handleAssignCourse}
        />
      )}
    </div>
  );
};

export default TeachersPage;
