import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Helmet } from 'react-helmet-async';

// Define interfaces
interface Project {
  id: string;
  title: string;
  description: string;
  sourceCodeUrl?: string;
}

interface Video {
  id: string;
  title: string;
  url: string;
  duration: string;
}

interface LiveSession {
  id: string;
  title: string;
  description: string;
  date: string;
  time: string;
  meetingId: string;
}

interface Internship {
  id: string;
  title: string;
  description: string;
  shortDescription: string;
  duration: string;
  level: string;
  slug: string;
  startDate: string;
  endDate: string;
  isActive: boolean;
  maxStudents?: number;
  currentStudents?: number;
  price: number;
  currency: string;
  tags?: string[];
  image?: string;
  projects?: Project[];
  videos?: Video[];
  liveSessions?: LiveSession[];
}

const InternshipDetailPage: React.FC = () => {
  const { slug } = useParams<{ slug: string }>();
  const navigate = useNavigate();
  const [isEnrolled, setIsEnrolled] = useState(false);
  const [internship, setInternship] = useState<Internship | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedSession, setSelectedSession] = useState<LiveSession | null>(null);
  
  // Fetch internship data
  useEffect(() => {
    const fetchInternship = async () => {
      try {
        // In a real app, fetch from your API using the slug
        const response = await fetch(`/api/internships/${slug}`);
        
        if (!response.ok) {
          throw new Error('Failed to fetch internship');
        }
        
        const data = await response.json();
        setInternship(data);
      } catch (error) {
        console.error('Error fetching internship:', error);
        // Fallback to mock data if API fails
        const mockInternship: Internship = {
          id: '1',
          slug: slug || 'web-development-bootcamp',
          title: 'Web Development Bootcamp',
          description: 'Learn full-stack web development with modern technologies',
          shortDescription: 'A comprehensive bootcamp for aspiring web developers',
          duration: '12 weeks',
          level: 'Beginner to Intermediate',
          startDate: '2023-09-01T00:00:00Z',
          endDate: '2023-11-24T23:59:59Z',
          isActive: true,
          maxStudents: 50,
          currentStudents: 32,
          price: 999,
          currency: 'USD',
          tags: ['web development', 'react', 'node.js', 'full stack'],
          image: 'https://via.placeholder.com/800x450',
          projects: [
            {
              id: 'p1',
              title: 'E-commerce Website',
              description: 'Build a full-stack e-commerce website with React and Node.js',
              sourceCodeUrl: 'https://github.com/example/ecommerce'
            },
            {
              id: 'p2',
              title: 'Task Management App',
              description: 'Create a task management application with user authentication',
              sourceCodeUrl: 'https://github.com/example/task-manager'
            }
          ],
          videos: [
            {
              id: 'v1',
              title: 'Introduction to React',
              url: 'https://www.youtube.com/embed/dGcsHMXbSOA',
              duration: '15:30'
            },
            {
              id: 'v2',
              title: 'Node.js Crash Course',
              url: 'https://www.youtube.com/embed/fBNz5xF-Kx4',
              duration: '1:45:22'
            }
          ],
          liveSessions: [
            {
              id: 'ls1',
              title: 'Q&A Session',
              description: 'Ask questions and get help with your projects',
              date: '2023-08-15',
              time: '18:00',
              meetingId: 'webdev-qa-0815'
            }
          ]
        };
        
        setInternship(mockInternship);
      } finally {
        setIsLoading(false);
      }
    };

    fetchInternship();
  }, [slug]);

  const handleEnroll = () => {
    // In a real app, this would make an API call to enroll the student
    setIsEnrolled(true);
    // You would typically redirect to a payment page or show a success message
  };

  const renderEnrollmentInfo = () => {
    if (!internship) return null;
    
    const startDate = new Date(internship.startDate).toLocaleDateString();
    const spotsLeft = internship.maxStudents && internship.currentStudents 
      ? internship.maxStudents - internship.currentStudents 
      : 'Unlimited';
    
    return (
      <div className="bg-white dark:bg-dark-800 rounded-xl shadow p-6 mb-8">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div>
            <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">Duration</h3>
            <p className="mt-1 text-lg font-medium text-gray-900 dark:text-white">{internship.duration}</p>
          </div>
          <div>
            <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">Level</h3>
            <p className="mt-1 text-lg font-medium text-gray-900 dark:text-white">{internship.level}</p>
          </div>
          <div>
            <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">Starts</h3>
            <p className="mt-1 text-lg font-medium text-gray-900 dark:text-white">{startDate}</p>
          </div>
          <div>
            <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">Spots Left</h3>
            <p className="mt-1 text-lg font-medium text-gray-900 dark:text-white">
              {typeof spotsLeft === 'number' ? `${spotsLeft} of ${internship.maxStudents}` : 'Unlimited'}
            </p>
          </div>
        </div>
        
        <div className="mt-8 border-t border-gray-200 dark:border-gray-700 pt-6">
          <div className="flex items-center justify-between">
            <div>
              <span className="text-3xl font-bold text-gray-900 dark:text-white">
                ${internship.price.toLocaleString()}
              </span>
              <span className="text-base font-medium text-gray-500 dark:text-gray-400 ml-1">
                {internship.currency}
              </span>
            </div>
            <button
              onClick={handleEnroll}
              disabled={isEnrolled}
              className={`px-6 py-3 rounded-lg font-medium text-white ${
                isEnrolled 
                  ? 'bg-green-600 cursor-not-allowed' 
                  : 'bg-blue-600 hover:bg-blue-700'
              } transition-colors`}
            >
              {isEnrolled ? 'Enrolled!' : 'Enroll Now'}
            </button>
          </div>
        </div>
      </div>
    );
  };

  const renderProjects = () => {
    if (!internship?.projects?.length) {
      return <p className="text-gray-500 dark:text-gray-400">No projects available yet.</p>;
    }
    
    return (
      <div className="space-y-6">
        {internship.projects.map((project) => (
          <div key={project.id} className="bg-white dark:bg-dark-800 p-6 rounded-xl shadow">
            <h3 className="text-xl font-semibold mb-2 text-gray-900 dark:text-white">
              {project.title}
            </h3>
            <p className="text-gray-600 dark:text-gray-300 mb-4">{project.description}</p>
            {project.sourceCodeUrl && (
              <a
                href={project.sourceCodeUrl}
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
              >
                View Source Code
                <svg
                  className="w-4 h-4 ml-1"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                  />
                </svg>
              </a>
            )}
          </div>
        ))}
      </div>
    );
  };

  const renderVideos = () => {
    if (!internship?.videos?.length) {
      return <p className="text-gray-500 dark:text-gray-400">No videos available yet.</p>;
    }
    
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {internship.videos.map((video) => (
          <div key={video.id} className="bg-white dark:bg-dark-800 rounded-xl overflow-hidden shadow">
            <div className="relative pt-[56.25%] bg-black">
              <iframe
                src={video.url}
                className="absolute top-0 left-0 w-full h-full"
                title={video.title}
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowFullScreen
              />
            </div>
            <div className="p-4">
              <h3 className="font-medium text-lg text-gray-900 dark:text-white">{video.title}</h3>
              <p className="text-sm text-gray-600 dark:text-gray-400">{video.duration}</p>
            </div>
          </div>
        ))}
      </div>
    );
  };

  const renderLiveSessions = () => {
    if (!internship?.liveSessions?.length) {
      return <p className="text-gray-500 dark:text-gray-400">No live sessions scheduled yet.</p>;
    }
    
    return (
      <div className="space-y-6">
        {internship.liveSessions.map((session) => (
          <div key={session.id} className="bg-white dark:bg-dark-800 p-6 rounded-xl shadow">
            <h3 className="text-xl font-semibold mb-2 text-gray-900 dark:text-white">
              {session.title}
            </h3>
            <p className="text-gray-600 dark:text-gray-300 mb-4">{session.description}</p>
            <div className="flex items-center text-sm text-gray-500 dark:text-gray-400">
              <span className="mr-4">{session.date}</span>
              <span>{session.time}</span>
            </div>
            <button
              onClick={() => setSelectedSession(session)}
              className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              Join Session
            </button>
          </div>
        ))}
      </div>
    );
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (!internship) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p className="text-gray-600 dark:text-gray-400">Internship not found.</p>
      </div>
    );
  }

  return (
    <main className="container mx-auto px-4 py-12">
      <Helmet>
        <title>{internship.title} | Internship Program</title>
      </Helmet>
      
      <div className="max-w-4xl mx-auto">
        <div className="mb-8">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
            <div>
              <h1 className="text-4xl font-bold text-gray-900 dark:text-white mb-2">
                {internship.title}
              </h1>
              <div className="flex flex-wrap gap-2 mb-4">
                {internship.tags?.map((tag, index) => (
                  <span 
                    key={index}
                    className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200"
                  >
                    {tag}
                  </span>
                ))}
              </div>
            </div>
            <div className="text-right">
              <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                internship.isActive 
                  ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                  : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
              }`}>
                {internship.isActive ? 'Active' : 'Inactive'}
              </span>
            </div>
          </div>
          
          {internship.image && (
            <div className="mb-6 rounded-xl overflow-hidden">
              <img 
                src={internship.image} 
                alt={internship.title} 
                className="w-full h-auto object-cover"
              />
            </div>
          )}
          
          <div className="prose dark:prose-invert max-w-none">
            <p className="text-xl text-gray-700 dark:text-gray-300 mb-6">
              {internship.shortDescription}
            </p>
            <div className="text-lg text-gray-700 dark:text-gray-300 space-y-4">
              {internship.description.split('\n\n').map((paragraph, i) => (
                <p key={i}>{paragraph}</p>
              ))}
            </div>
          </div>
        </div>
        
        {renderEnrollmentInfo()}
        
        <div className="space-y-12 mt-12">
          {internship.projects && internship.projects.length > 0 && (
            <div>
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">Projects</h2>
              {renderProjects()}
            </div>
          )}
          
          {internship.videos && internship.videos.length > 0 && (
            <div>
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">Learning Resources</h2>
              {renderVideos()}
            </div>
          )}
          
          {internship.liveSessions && internship.liveSessions.length > 0 && (
            <div>
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">Live Sessions</h2>
              {renderLiveSessions()}
            </div>
          )}
        </div>
      </div>
    </main>
  );
};

export default InternshipDetailPage;
