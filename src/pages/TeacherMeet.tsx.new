import React, { useEffect, useRef, useCallback } from 'react';
import { useAuth } from '../contexts/AuthContext';

// Type declarations for Jitsi Meet External API
declare global {
  interface Window {
    JitsiMeetExternalAPI: any;
  }
}

// Simplified interface for the Jitsi Meet API methods we'll use
interface JitsiMeetAPI {
  executeCommand: (command: string, ...args: any[]) => void;
  addEventListener: (event: string, listener: (...args: any[]) => void) => void;
  removeEventListener: (event: string, listener: (...args: any[]) => void) => void;
  dispose: () => void;
  isAudioMuted: () => boolean;
  isVideoMuted: () => boolean;
  getDisplayName: () => string;
  getParticipantsInfo: () => any[];
}

// Interface for component props
interface TeacherMeetProps {
  isTeacher: boolean;
  roomName: string;
  onMeetingEnd: () => void;
}

const TeacherMeet: React.FC<TeacherMeetProps> = ({ isTeacher, roomName, onMeetingEnd }) => {
  const { user } = useAuth();
  const jitsiContainerId = `jitsi-container-${Date.now()}`;
  const jitsiRef = useRef<JitsiMeetAPI | null>(null);
  const isMountedRef = useRef(true);

  // Generate a random room name if not provided
  const generateRoomName = useCallback((): string => {
    return `teacher-meet-${Math.random().toString(36).substring(2, 15)}`;
  }, []);

  // Load Jitsi script dynamically
  const loadJitsiScript = useCallback((): Promise<void> => {
    return new Promise((resolve, reject) => {
      if (window.JitsiMeetExternalAPI) {
        return resolve();
      }
      
      const script = document.createElement('script');
      script.src = 'https://meet.jit.si/external_api.js';
      script.async = true;
      script.onload = () => resolve();
      script.onerror = () => reject(new Error('Failed to load Jitsi script'));
      document.body.appendChild(script);
    });
  }, []);

  // Initialize Jitsi when component mounts
  useEffect(() => {
    if (!user || !roomName) return;

    isMountedRef.current = true;
    const container = document.getElementById(jitsiContainerId);
    
    if (!container) {
      console.error('Failed to find Jitsi container');
      return;
    }

    // Initialize and start the Jitsi meeting
    const startMeeting = async (): Promise<void> => {
      try {
        await loadJitsiScript();
        if (!isMountedRef.current) return;

        const displayName = user?.name || (isTeacher ? 'Teacher' : 'Student');
        const email = user?.email || '';
        const roomNameToUse = roomName || generateRoomName();
        
        const domain = 'meet.jit.si';
        
        // Jitsi meeting options
        const options = {
          roomName: roomNameToUse,
          width: '100%',
          height: '100%',
          parentNode: container,
          userInfo: {
            displayName,
            email,
            moderator: isTeacher ? 'true' : 'false'
          },
          configOverwrite: {
            // Core settings
            startWithAudioMuted: !isTeacher,
            startWithVideoMuted: !isTeacher,
            startAudioOnly: false,
            enableWelcomePage: false,
            prejoinPageEnabled: false,
            disableInviteFunctions: true,
            
            // Disable lobby and members-only mode
            enableLobby: false,
            enableMembersOnly: false,
            
            // Disable features that might interfere
            disableRemoteMute: false,
            enableNoAudioDetection: false,
            enableNoisyMicDetection: false,
            
            // Toolbar buttons configuration
            toolbarButtons: isTeacher ? [
              'microphone', 'camera', 'closedcaptions', 'desktop', 'fullscreen',
              'fodeviceselection', 'hangup', 'profile', 'info', 'chat', 'recording',
              'livestreaming', 'settings', 'raisehand', 'videoquality', 'filmstrip',
              'feedback', 'stats', 'shortcuts', 'tileview', 'toggle-camera',
              'participants-pane', 'toggle-participants-pane', 'toggle-chat-pane'
            ] : [
              'microphone', 'camera', 'hangup', 'raisehand', 'chat', 'tileview',
              'toggle-camera', 'fullscreen', 'fodeviceselection', 'profile',
              'participants-pane', 'settings', 'videoquality', 'feedback', 'filmstrip'
            ],
            
            // Disabled features
            disabledFeatures: [
              'calendar', 'invite', 'liveStreaming', 'recording', 'video-share',
              'welcomepage', 'notifications', 'speaker-stats', 'kick-out', 'video-share',
              'lobby', 'prejoin', 'meeting-password', 'add-people', 'dial-out',
              'meeting-name', 'meeting-password', 'overflow-menu', 'prejoin-page',
              'recording', 'sip-invite', 'video-quality', 'welcome-page'
            ],
            
            // Testing configuration
            testing: {
              enableLobby: false,
              disableLobbyButton: true,
              disableLobbyMode: true,
              enableLobbyPassword: false,
              enableLobbyNotifications: false,
              enableLobbyPrejoin: false,
              enableWelcomePage: false,
              enablePrejoinPage: false,
              enableForcedReload: false
            },
            ...(isTeacher ? {
              // Add any teacher-specific settings here
            } : {})
          },
          interfaceConfigOverwrite: {
            // UI configuration
            DEFAULT_BACKGROUND: '#f5f5f5',
            INITIAL_TOOLBAR_TIMEOUT: 5000,
            TOOLBAR_TIMEOUT: 4000,
            HIDE_INVITE_MORE_HEADER: true,
            DISABLE_JOIN_LEAVE_NOTIFICATIONS: true,
            DISABLE_VIDEO_BACKGROUND: true,
            DISABLE_PRESENCE_STATUS: true,
            DISABLE_RINGING: true,
            DISABLE_TRANSCRIPTION_SUBTITLES: true,
            MOBILE_APP_PROMO: false,
            SHOW_JITSI_WATERMARK: false,
            SHOW_WATERMARK_FOR_GUESTS: false,
            SHOW_BRAND_WATERMARK: false,
            SHOW_POWERED_BY: false,
            
            // Toolbar buttons visibility
            TOOLBAR_BUTTONS: isTeacher ? [
              'microphone', 'camera', 'closedcaptions', 'desktop', 'fullscreen',
              'fodeviceselection', 'hangup', 'profile', 'info', 'chat', 'recording',
              'livestreaming', 'settings', 'raisehand', 'videoquality', 'filmstrip',
              'feedback', 'stats', 'shortcuts', 'tileview', 'toggle-camera',
              'participants-pane', 'toggle-participants-pane', 'toggle-chat-pane'
            ] : [
              'microphone', 'camera', 'hangup', 'raisehand', 'chat', 'tileview',
              'toggle-camera', 'fullscreen', 'fodeviceselection', 'profile',
              'participants-pane', 'settings', 'videoquality', 'feedback', 'filmstrip'
            ]
          },
          userRoles: isTeacher ? ['moderator'] : []
        };

        // Initialize Jitsi Meet API
        jitsiRef.current = new window.JitsiMeetExternalAPI(domain, options);
        
        // Handle Jitsi events
        if (jitsiRef.current) {
          // Handle conference join
          jitsiRef.current.addEventListener('videoConferenceJoined', () => {
            console.log('Joined conference as', isTeacher ? 'moderator' : 'participant');
            
            if (isTeacher) {
              // Ensure moderator has all necessary permissions
              jitsiRef.current?.executeCommand('setPassword', '');
              jitsiRef.current?.executeCommand('toggleLobby', false);
            }
          });

          // Handle participant role changes
          jitsiRef.current.addEventListener('participantRoleChanged', (event: any) => {
            console.log('Participant role changed:', event);
            if (event?.role === 'moderator') {
              jitsiRef.current?.executeCommand('setPassword', '');
              jitsiRef.current?.executeCommand('toggleLobby', false);
            }
          });

          // Handle conference left
          jitsiRef.current.addEventListener('videoConferenceLeft', () => {
            console.log('Left conference');
            onMeetingEnd();
          });

          // Handle errors
          jitsiRef.current.addEventListener('error', (error: any) => {
            console.error('Jitsi error:', error);
          });
        }
      } catch (error) {
        console.error('Error initializing Jitsi:', error);
      }
    };

    // Start the meeting
    startMeeting();

    // Cleanup on unmount
    return () => {
      isMountedRef.current = false;
      if (jitsiRef.current) {
        jitsiRef.current.dispose();
        jitsiRef.current = null;
      }
    };
  }, [user, roomName, isTeacher, onMeetingEnd, jitsiContainerId, loadJitsiScript, generateRoomName]);

  return (
    <div
      id={jitsiContainerId}
      style={{
        width: '100%',
        height: 'calc(100vh - 64px)',
        position: 'relative',
        overflow: 'hidden',
        backgroundColor: '#f5f5f5',
        borderRadius: '8px',
        border: '1px solid #ddd'
      }}
    />
  );
};

export default TeacherMeet;
